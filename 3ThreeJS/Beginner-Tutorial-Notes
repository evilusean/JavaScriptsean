Tutorial:
https://www.youtube.com/watch?v=xJAfLdUgdc4&ab_channel=WaelYasmina

NPM:
https://www.npmjs.com/package/three

Start: 12Jun2024
End:

Notes:
Going to start here, just to understand the basics and then get into projects, 
First create project file, install a bundler through NPM, 
'npm init -Y' #creates package.json
'npm install parcel --save-dev' or 'npm install parcel -g' #global install or use something like webpack
'npm install three' #will install threeJS, install after parcel
next, create a 'src' foldoer with 'js' 'script.js' and 'index.html'
<script src="./js/scripts.js" type="module"> #notice how the type is set to module and not script
import * as THREE from 'three'; #import all from threeJS
const renderer = new THREE.WebGLRenderer(); #next we need create an instance of the webGL renderer - a tool which ThreeJS uses to allocate space on a webpage, where you can add and animate 
renderer.setSize(window.innerWidth, window.innerHeight); #width and height as arguments, this will take up the full page using the .innerWidth and Height properties, this is basically a canvas element
document.body.appendChild(renderer.domElement); #inject that space into the page
'parcel ./src/index.html' #will bundle your newly created page, will also refresh the page every time you save, will create a 'dist' folder
<style>body { margin: 0 }</style> # to get rid of the scrollbars, set the margin to zero, will need to do this if your canvas is the full size of the screen

X,Y,Z = 3D, 3 Axis, corodinates, cartesian Coords, 
Set the sean(scene) - you will need a camera, and components (lights, actor, objects)
You need to create a scene(sean) by creating an instance of the sean(scene) class, then choose a camera, to create an instance, then add elements to the scene
2 types of cameras = 1st: Perspective camera(same as RL camera), and autographic camera(used to render 2D seans(scenes))
to create a perspective camera in ThreeJS, you need X4 Values = Vertical Field of View(Max Angle), Aspect Ratio(proportion of width and height w/h), Near and Far Clipping planes(bounds of what can be sean(seen)/rendered), 
x6 Values for Autographic Camera = Left, Right, Top, Bottom Edges(or limits of the scene(sean)), Near and Far Clipping Planes(also limits of the scene(sean) but distance) 
The perspective of the ball changes as the ball get's closer or farther away from the camera using a perspective camera, with an autographic camera, it does not, depth does not matter for autographic

#to create a new scene, we need x4 Arguments, talked about above
const scene = new THREE.Scene(); 
const camera = new THREE.PerspectiveCamera(
  75, #Field of view depends on what you are working on(generally between 40-80 is good)
  window.innerWidth / window.innerHeight, #aspect ratio, width / height 
  0.1 #near clipping plane
  1000 #far clipping plane
); 
renderer.render(scene, camera); #will render the scene(sean) using the newly created scene(sean) and camera as arguments
const axesHelper = new Three.AxesHelper(5) #Axes Helper, a tool that serves as a guide, introduces the 3D coordinates system into the scene, the '5' represenets the length of the Axes
scene.add(axesHelper); #will add the newly created axesHelper to the scene(sean)
camera.position.z = 5; #the camera is set to the point (0,0,0) by default, we will move the camera up 5 on the Z coordinate
camera.position.y = 2; #will move the camera up 2 on the Y coord
camera.position.set(0, 2, 5); #will set the camera on the scene, first element is X axis, (X, Y, Z)

10:00=============================================================================================================================================================================================================================
const boxGeometry = new THREE.BoxGeometry(); #will create a new naked box object
const boxMaterial = new THREE.MeshBasicMaterial({color: 0x00FF00}); #new mesh object of color <-that
const box = new THREE.Mesh(boxGeometry, boxMaterial); #creates a new box object that has a mesh
scene.add(box); #adds the new box object to the scene(sean)
box.rotation.x = 5; #Geometric Transformation, after creating our objects we can transform them, such as a rotation, 
box.rotation.y = 5; #transformation rotation of y axis by 5
function animate() {box.rotation.x += 0.01; box.rotation.y += 0.01; renderer.render(scene, camera); } #will create an animation that rotates a cube
renderer.setAnimationLoop(animate); #pass our above new function as an argument to animate the cube
function animate(time) {box.rotation.x = time / 1000; box.rotation.y = time / 1000; renderer.render(scene, camera); } #control the speed of animation by using 'time' as an argument and variable for rotation

import {OrbitControls} from 'three/examples/jsm/controls/OrbitCOntrols.js'; #will allow us to control the camera angle using the mouse buttons 
const orbit = new OrbitControls(camera, renderer.domElement); #we need to create an instance in order to use it
orbit.update() #call the update method every time you change the position of the camera - this is very important - now you can rotate the camera around the cube object, left click rotates, scroll in/out with wheel, right up/down

The creation of an element in ThreeJS happens in 3 phases, 1) Creation of Geometry/Skeleton, 2) Creation of the Material/Mesh/Skin 3) Cover the Geometry with the Material/Mesh/Skin
Some materials require more resources/demands on the system and you should be careful which material you pick in case someone is using your site on a potatoe
If you use the 'THREE.MeshBasicMaterial' it will appear without a light source - 'MeshStandardMaterial' 'MeshLambartMaterial' both require a lightsource - check documentASean to know the full list

const planeGeometry = new THREE.PlaneGeometry(30, 30); #create a 30x30 flat plane geometry
const planeMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF}); #create a color mesh
const plane = new THREE.Mesh(planeGeometry, planeMaterial); #add geometry and mesh together
scene.add(plane); #add our new mesh to the scene
when you rotate the plane to the side, the material disapears - to fix this you need to add the side property and change it to 3 double side, like below
const planeMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF, side: THREE.DoubleSide, });

const gridHelper = new THREE.GridHelper(30, 100); #creates a grid of size (30) with (100) squares divided into it the (30, 100) is optional
scene.add(gridHelper); #adds a grid to the scene

const sphereGeometry = new THREE.SphereGeometry(4);
const sphereMaterial = new THREE.MeshBasicMaterial({color: 0x0000FF, wireframe: true}); #wireframe will allow us to see the polygons(is that the right word?) dodecahedrons(?) the wire frame outline.
const spehere = new THREE.Mesh(sphereGeometry, sphereMaterial);
scene.add(sphere); # will add a blue sphere to the center of the scene, with wireframe = WELCOME TO THE BLUE THUNDERDOME

the quality of the mesh depends upon the number of faces on the entity, if you increase the number of segments, you can increase the 'roundness' of the object
const sphereGeometry = new THREE.SphereGeometry(4, 10, 10); #decreased the proporSeans of the sphere, and way less rounded due to the reduced amount of faces on the segments,

sphere.position.x = -10; #will repositionthe sphrere into the -10th(?) X position
sphere.position.set(-10, 10, 0) #will reposition (X, Y,Z) (-10, 10, 0) - you don't have to set each axis individually like above, do all 3 at once

20:00================================================================================================================================================================================================================================
Debugging and playing with values to get the perfect position of an element and it's color can take a long time, there is a tool you can utilize to solve this problem : 'dat.gui'
to install it stop parcel first
'npm install dat,gui' #will install 'dat.gui' a package for sorting out the location and coloring of objects in Three.JS
'parcel ./src/index.html' #restart parcel after installing dat.gui

import * as dat from 'dat.gui' #import all 
const gui = new dat.GUI(); #create a new instance of the GUI class

#will create a color pallette to test colors
const options = { sphereColor: '#ffea00' }; 
gui.addColor(options, 'sphereColor').onChange(function(e){
  sphere.material.color.set(e) 
}); #to add the color pallette we need to add 'options' and 'sphereColor' as arguments, onChange will call the function every time we change the color, above code will create a GUI to change the color of the sphere

#will create a color pallette to test colors, and a checkbox for the wireframe mode
const options = { sphereColor: '#ffea00', wireframe: false, }; 
gui.add(options, 'wireframe').onChange(function(e){
  sphere.material.wireframe = e;
});#will create a check box that will check 'e' if the checkbox is checked it will show 'true' unchecked 'false' to our GUI

#to create a sphere bounce 
let step = 0;
let speed = 0.01
function animate(time) { step += speed; sphere.position.y = 10 * Math.abs(Math.sin(step)); } #will create an animated bounce of the sphere - I don't understand how the formula works - but it works

#to create a sphere bounce and add a slider to control the bouncing speed in the GUI
const options = { sphereColor: '#ffea00', wireframe: false, speed: 0.01, };
gui.add(options, 'speed', 0, 0.1); #2 new added arguments, one being the minimum value and the second being the maximum value
function animate(time) { step += options.speed; sphere.position.y = 10 * Math.abs(Math.sin(step)); } #note the 'options.speed' will take the value from there, from our 'const options' variable

There are different types of light we can use to illuminate the scene(sean), our meshes can cast shadows, 
  1) Ambient Light = light that comes from the environment, like daylight in a room
  2) Directional Light = Has a source, and a direction
  3) Spotlight = Emits the light in the form of a cone
each different material has a different algorithm for how it is affected by light, in order to make them cast smoother shadows, and realistic reflectSeans
working with lights can be tricky, ThreeJS provides helpers to work with lights, taking the lights as arguments, changing the positions of the lights changes the shadows

#create an ambient light
const ambientLight = new THREE.AmbientLight(0x333333);  #
scene.add(ambientLight); #to add an ambient light we need to add it to the scene, same as an object/mesh

#create a directional light
const directonalLight = new THREE.DirectionalLight(0xFFFFFF, 0.8);
scene.add(directionalLight); #also needs to be added to the scene after being created, this will work fine, we can create a directional light helper to help us with the location of the light - below
const dLightHelper = new THREE.DirectionalLightHelper(directionalLight); #we pass the light we created as an argument for the helper
scene.add(dLightHelper); #also needs to be added to the scene, it will be seen as a square that indicates the direction of the light
directionalLight.position.set(-30, 50, 0); #will change the position of the light, if we change the position of the light, the helper will automatically move with it.
const dLightHelper = new THREE.DirectionalLightHelper(directionalLight, 5);  #the '5' as second argument will change the size of the directional square showing position
spotLight.castShadow = true; #will allow the spotLight to cast a shadow
spotLight.angle = 0.2; #narrows the spotlights angle, reducing the pixelation of the shadow, and increasing resolution

#create a spotlight
const spotLight = new THREE.SpotLight(0xFFFFFF); #syntax to create a spotlight
scene.add(spotLight) #also needs to be added to the scene
spotLight.position.set(-100, 100, 0); #will change the position of spotlight (X, Y, Z)
const sLightHelper = new THREE.SpotLightHelper(spotLight); #will create a spotLightHelper to view the light
scene.add(sLightHelper); #add it to the scene

Shadows in ThreeJS are not enabled by default, you will also need to manually set if an object receives or casts shadows or not, 
  shadows in ThreeJS will have a shadow camera internally, it delimits where to render the shadows, to render the shadows, we can use another helper 
renderer.shadowMap.enabled = true; #Shadows by default are turned off, put this as the start of code to enable
plane.receiveShadow = true; #you will need to enable that objects receive shadows for each object, this will enable it for the 'plane'
sphere.castShadow = true; #enable casting shadows for the 'sphere'
directionalLight.castShadow = true; #lights will also need to have shadows enabled, main source of casting shadows
const dLightShadowHelper = new THREE.CameraHelper(directionalLight.shadow.camera) #shows wheredelimits where to render the shadows, will render a shadowHelper for our lightsource
scene.add(dLightShadowHelper); #will also need to be added to the scene, will give 4 lines showing the surface on which a shadow can be rendered
directonalLight.shadow.camera.bottom = -12; #will increase the shadow camera size(area which casts shadows) by -12 since it's the bottom and going negative, it will increase - + - 

#add more to GUI for spotlight shadows
const options = { sphereColor: '#ffea00', wireframe: false, speed: 0.01, angle: 0.2, penumbra: 0, intensity: 1 };
gui.add(options, 'angle', 0, 1); #arguments are options variable, angle, min, max - will add to the GUI to fix the positioning/color/shadows
gui.add(options, 'penumbra', 0, 1); #arguments are options variable, penumbra, min, max - will add to the GUI to fix the positioning/color/shadows
gui.add(options, 'intensity', 0, 1); #arguments are options variable, angle, min, max - will add to the GUI to fix the positioning/color/shadows
function animate(time) { step += options.speed; sphere.position.y = 10 * Math.abs(Math.sin(step)); spotLight.angle = options.angle; spotLight.penumbra = options.penumbra; spotLight.intensity = options.intensity; sLightHelper.update() }
  #animation values, taken from the options variable, make sure that you update the helper when you update the variables, 
penumbra is a progressive blur 
intensity is the intensity of light
angle is the... angle

33:00===========================================================================================================================================================================================================
#add fog, 2 methods
scene.fog = new THREE.Fog(0xFFFFFF, 0, 200) # takes three arguments, 'color' 'near limit' and 'far limit' of the space, the further you get from '0' the denser the fog gets
scene.fog = new THREE.FogExp2(0xffffff, 0.01) #second method of creating fog, instantiating the fog exp 2 class, 2 arguments 'color' and 'density', the density grows exponentially with distance from the camera

#change background
renderer.setClearColor(0xFFEA00); #will change the background to yellow

#change background to an image = add image to 'src/img' folder for below code, parcel will bundle any used asset from there
import imagename from '../img/imagename.jpg' #first import assets, once you save a new file will be created
const textureLoader = new THREE.TextureLoader(); #first create the loader to use an asset in ThreeJS you need to load it first, for images you need a textureLoader, each type of asset/file requires a different loading method, 
scene.background = textureLoader.load(imagename); #will use our newly created loader to load the 'imagename' into the background

#cube texture loader, the background has x6 sides, each one can be set for the background, <>^\/top bot
const cubeTextureLoader = new THREE.CubeTextureLoader(); #create the cube texture loader
scene.background = cubeTextureLoader.load([imagename1, imagename2, imagename3, imagename4, imagename5, imagename6]); #takes an array of image paths, each will serve as a texture to the face of the cube/scene, x6 sides = x6 array

#create a cube with custom faces
const box2Geometry = new THREE.BoxGeometry(4, 4, 4);
const box2Material = new THREE.MeshBasicMaterical({color: 0x00FF00, map: textureLoader.load(imageArrayVariable)}); #will use the textureLoader to load an image array with x6 images, 1 for each face for the cube, in greenish tint
const box2 = new THREE.Mesh(box2Geometry, box2Material);
scene.add(box2)
box2.position.set(0, 15, 10);

#create a custom mesh for above box
const box2MultiMaterial = [new THREE.MeshBasicMaterial({map: textureLoader.load(stars)}),]; #will need to repeat the 'map: {}' x6 times for a complete cube

40:00==============================================================================================================================================================================================================================
Raycaster = In some cases you may want the user to select elements from the scene this can be done with a raycaster = emits an invisible ray that between a 'source' and a 'destination' every object that the ray goes through
  gets registered - using the 'camera' as 'source' and 'mouse' as 'destination' 
const mousePosition = new THREE.Vector2();
window.addEventListener('mousemove', function(e) {mousePosition.x = (e.clientX / window.innerWidth) * 2 - 1; mousePosition.y = - (e.clientY / window.innerHeight) * 2 + 1;}); #add an eventlistener to catch the change of the mouse 
const rayCaster = new THREE.Raycaster();#create new instance of raycaster class
function animate(time) {rayCaster.setFromCamera(mousePosition, camera); const intersects = rayCaster.intersectObjects(scene.children);} #in the animate function, will check if any objects intersect from the camera to the mouse position
console.log(intersects); #will log any objects that are touched by the mouse, including the helpers -
const sphereId = sphere.id #threeJS gives an ID to each element add to the scene, this can be seen in the console.log
function animate(time) { for(let i=0; i < intersects.length; i++) { if(intersects[i].object.id === sphereId) intersects[i].object.materiial.color.set(0xFF0000); } # will loop and change color if the sphere is hovered with mouse to red
box2.name = 'theBox'; #set a name to an element, then add a condition to the loop that changes the box if it gets hovered
function animate(time) { for(let i=0; i < intersects.length; i++) { if(intersects[i].object.id === 'theBox') {box.rotation.x = time /1000; box.rotation.y = time /1000 } } #will rotate the box if it is hovered

#change shape of mesh
You can change the shape of the mesh by updating the points that make up the geometry of that mesh
const plane2Geometry = new THREE.PlaneGeometry(10, 10, 10, 10);
const plane2Material = new THREE.MeshBasicMaterial({color: 0x$$$$$$, wireframe: true });
const plane2 = new THREE.Mesh(plane2Geometry, plane2Material);
scene.add(plane2);
plane2.position.set(10, 10, 15);
plane2.geometry.attributes.position.array[0] -= 10 * Math.random();#0 based index [X,Y,Z,X,Y,Z...] so 0=X
plane2.geometry.attributes.position.array[1] -= 10 * Math.random();
plane2.geometry.attributes.position.array[2] -= 10 * Math.random(); #now everytime you refresh the page, 3 random values are set on these vertexes(vertices?)
const LastPointZ = plane2.geometry.attributes.position.array.length -1; #to change Z index, change the last point on the array
plane2.geometry.attributes.position.array[LastPointZ] -= 10 * Math.random();
plane2.geometry.attributes.position.needsUpdate #to animate replace the '-=' above with '=' and add this line of code at the end, and move above code to the 'animate' function














